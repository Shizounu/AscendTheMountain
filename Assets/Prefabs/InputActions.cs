//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Prefabs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""General Controls"",
            ""id"": ""775ec2b0-db0d-4234-a6cd-4343c9be6f27"",
            ""actions"": [
                {
                    ""name"": ""Open Settings"",
                    ""type"": ""Button"",
                    ""id"": ""0f7bb646-95bd-493b-ad3e-9907993e519f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e321777-61fc-4458-a6db-1bf6cb0b93d1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Open Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Battlefield Control"",
            ""id"": ""42d51438-61fc-49d7-82a3-6d561588209b"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""3025704b-2361-42f4-bdf9-95598efae154"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""0a705f67-c755-4181-b2fc-33aa09e3c1f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""215c0ce5-291f-4546-8a65-ca9df75bfadc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c25eefc-70af-4686-a7e8-0c1ce2d5ea71"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ab1cf67-a6a8-4830-9a4a-2e9c527aaa4e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85b41d44-e389-4d92-9685-884cb2d1f017"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // General Controls
            m_GeneralControls = asset.FindActionMap("General Controls", throwIfNotFound: true);
            m_GeneralControls_OpenSettings = m_GeneralControls.FindAction("Open Settings", throwIfNotFound: true);
            // Battlefield Control
            m_BattlefieldControl = asset.FindActionMap("Battlefield Control", throwIfNotFound: true);
            m_BattlefieldControl_LeftClick = m_BattlefieldControl.FindAction("LeftClick", throwIfNotFound: true);
            m_BattlefieldControl_RightClick = m_BattlefieldControl.FindAction("RightClick", throwIfNotFound: true);
            m_BattlefieldControl_MousePosition = m_BattlefieldControl.FindAction("MousePosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // General Controls
        private readonly InputActionMap m_GeneralControls;
        private List<IGeneralControlsActions> m_GeneralControlsActionsCallbackInterfaces = new List<IGeneralControlsActions>();
        private readonly InputAction m_GeneralControls_OpenSettings;
        public struct GeneralControlsActions
        {
            private @InputActions m_Wrapper;
            public GeneralControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenSettings => m_Wrapper.m_GeneralControls_OpenSettings;
            public InputActionMap Get() { return m_Wrapper.m_GeneralControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneralControlsActions set) { return set.Get(); }
            public void AddCallbacks(IGeneralControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Add(instance);
                @OpenSettings.started += instance.OnOpenSettings;
                @OpenSettings.performed += instance.OnOpenSettings;
                @OpenSettings.canceled += instance.OnOpenSettings;
            }

            private void UnregisterCallbacks(IGeneralControlsActions instance)
            {
                @OpenSettings.started -= instance.OnOpenSettings;
                @OpenSettings.performed -= instance.OnOpenSettings;
                @OpenSettings.canceled -= instance.OnOpenSettings;
            }

            public void RemoveCallbacks(IGeneralControlsActions instance)
            {
                if (m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGeneralControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_GeneralControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GeneralControlsActions @GeneralControls => new GeneralControlsActions(this);

        // Battlefield Control
        private readonly InputActionMap m_BattlefieldControl;
        private List<IBattlefieldControlActions> m_BattlefieldControlActionsCallbackInterfaces = new List<IBattlefieldControlActions>();
        private readonly InputAction m_BattlefieldControl_LeftClick;
        private readonly InputAction m_BattlefieldControl_RightClick;
        private readonly InputAction m_BattlefieldControl_MousePosition;
        public struct BattlefieldControlActions
        {
            private @InputActions m_Wrapper;
            public BattlefieldControlActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftClick => m_Wrapper.m_BattlefieldControl_LeftClick;
            public InputAction @RightClick => m_Wrapper.m_BattlefieldControl_RightClick;
            public InputAction @MousePosition => m_Wrapper.m_BattlefieldControl_MousePosition;
            public InputActionMap Get() { return m_Wrapper.m_BattlefieldControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BattlefieldControlActions set) { return set.Get(); }
            public void AddCallbacks(IBattlefieldControlActions instance)
            {
                if (instance == null || m_Wrapper.m_BattlefieldControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BattlefieldControlActionsCallbackInterfaces.Add(instance);
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }

            private void UnregisterCallbacks(IBattlefieldControlActions instance)
            {
                @LeftClick.started -= instance.OnLeftClick;
                @LeftClick.performed -= instance.OnLeftClick;
                @LeftClick.canceled -= instance.OnLeftClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
            }

            public void RemoveCallbacks(IBattlefieldControlActions instance)
            {
                if (m_Wrapper.m_BattlefieldControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBattlefieldControlActions instance)
            {
                foreach (var item in m_Wrapper.m_BattlefieldControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BattlefieldControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BattlefieldControlActions @BattlefieldControl => new BattlefieldControlActions(this);
        private int m_MouseandKeyboardSchemeIndex = -1;
        public InputControlScheme MouseandKeyboardScheme
        {
            get
            {
                if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
                return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
            }
        }
        public interface IGeneralControlsActions
        {
            void OnOpenSettings(InputAction.CallbackContext context);
        }
        public interface IBattlefieldControlActions
        {
            void OnLeftClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
        }
    }
}
